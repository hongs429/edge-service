server:
  port: 9000
  netty:
    connection-timeout: 2s  # TCP ?? ?? ??
    idle-timeout: 15s # ??? ???? ?? ?? TCP ??? ???? ???? ??
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # ??? ?? ?? ??? 15?? ??

  session:
    redis:
      namespace: polar:edge
    timeout: 10m

  cloud:
    gateway:
      server:
        webflux:
          routes: # route ??? ??
            - id: catalog-route # ??? ???
              uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
              predicates: # ?? ?? ??
                - Path=/books/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: catalogCircuitBreaker
                    fallbackUri: forward:/catalog-fallback # 회로가 개방 상태일 때 요청을 해당 uri로 전달
            - id: order-route
              uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
              predicates:
                - Path=/orders/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: orderCircuitBreaker
          httpclient:
            connect-timeout: 2000
            response-timeout: 5s
            pool:
              type: elastic
              max-idle-time: 15s
              max-life-time: 60s
          default-filters:
            - name: SaveSession

            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenishRate: 10 # 초당 버킷에 떨어지는 토큰 갯수
                  burstCapacity: 20 # 최대 20개 요청까지 허용
                  requestedTokens: 1 # 하나의 요청 처리에 몇개의 토큰이 사용되는지 지정

            - name: Retry
              args:
                retries: 3
                methods: GET
                series: SERVER_ERROR
                exceptions: java.io.IOException,java.util.concurrent.TimeoutException
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: false
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20 # 20개의 요청을 지속적으로 확인
        permitted-number-of-calls-in-half-open-state: 5 # 회로가 반개방 상태일 때 허용하는 요청 수
        failure-rate-threshold: 50 # 실패율이 50% 이상일 경우 open 상태로 전환
        wait-duration-in-open-state:
          seconds: 15 # 개방상태의 지속 시간
  timelimiter:
    configs:
      default: # 모든 시간 제한에 대한 기본 설정 . 해당 타임아웃은 기본적으로 netty의 httpclient의 타임아웃시간보다 우선순위를 갖음!!
        # 이유는 application 레벨의 타임아웃이기 때문임. httpclient 타임아웃은 네트워크 레벨임. 그렇기 때문에 결과적으로 짧은 순으로 동작함.
        timeout-duration:
          seconds: 5 # 응답시간에 대한 application 레벨의 타임아웃 설정

# 처리 순서 : TimeLimiter or HttpTimeout -> CircuitBreaker(폐쇄 상태/개방 상태 체크) -> 재시도


logging:
  level:
    io.github.resilience4j: DEBUG